import hre from "hardhat";
import { ethers } from "ethers";

describe("hardhat-test", () => {
    it("hardhat ethers test", async () => {
        console.log(hre.ethers);
        console.log();
        const signers = await hre.ethers.getSigners();
        console.log(signers);
        console.log();
        console.log(signers.length);

        // bob --> alice : 100 ETH
        const [bob, alice] = signers;
        const txHash = await bob.sendTransaction({
            to: alice.address,
            value: hre.ethers.parseEther("100")  // 1 ETH == 10^18 wei
        });  // unique tx id
        const receipt = await txHash.wait();
        console.log(await hre.ethers.provider.getTransaction(txHash.hash));
        console.log(txHash);
        console.log(receipt);
    });  // implicit transaction signing

    it("ethers test", async () => {
        const provider = new ethers.JsonRpcProvider(
            "http://localhost:8545"
        );

        const bobWallet = new ethers.Wallet(
            "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80",
            provider
        );
        const aliceWallet = new ethers.Wallet(
            "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d",
            provider
        );
        const tx = {
            from: bobWallet.address,
            to: aliceWallet.address,
            value: ethers.parseEther("100"),
            //chainId: 31337,
        };
        const populatedTx = await bobWallet.populateTransaction(tx);  // fill
        console.log(populatedTx);

        const signedTx = await bobWallet.signTransaction(populatedTx);
        console.log(signedTx);
        const txHash = await provider.send("eth_sendRawTransaction", [signedTx]);
        console.log(txHash);
        //const receipt = await txHash.wait();
        //console.log(await provider.get("", [txHash.hash]));
        //console.log(receipt);

        console.log("\n\nBalances:");
        const bobBalance = await provider.getBalance(aliceWallet.address);
        console.log(ethers.formatEther(bobBalance));
        const aliceBalance = await provider.getBalance(bobWallet.address);
        console.log(ethers.formatEther(aliceBalance));
    });
});
